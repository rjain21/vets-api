# rubocop:disable Metrics/ModuleLength
# For use with Form526Submission
module Form526ClaimFastTrackingConcern
  @open_claims: untyped

  @all_rated_disabilities: untyped

  extend ActiveSupport::Concern

  RRD_STATSD_KEY_PREFIX: "worker.rapid_ready_for_decision"

  MAX_CFI_STATSD_KEY_PREFIX: "api.max_cfi"

  EP_MERGE_STATSD_KEY_PREFIX: "worker.ep_merge"

  EP_MERGE_BASE_CODES: ::Array["010" | "110" | "020"]

  EP_MERGE_SPECIAL_ISSUE: "EMP"

  OPEN_STATUSES: ::Array["CLAIM RECEIVED" | "UNDER REVIEW" | "GATHERING OF EVIDENCE" | "REVIEW OF EVIDENCE" | "CLAIM_RECEIVED" | "INITIAL_REVIEW"]

  CLAIM_REVIEW_BASE_CODES: ::Array["030" | "040"]

  CLAIM_REVIEW_TYPES: ::Array["higherLevelReview" | "supplementalClaim"]

  def send_rrd_alert_email: (untyped subject, untyped message, ?untyped? error, ?untyped to) -> untyped

  def read_metadata: (untyped key) -> untyped

  # @param metadata_hash [Hash] to be merged into form_json['rrd_metadata']
  def save_metadata: (untyped metadata_hash) -> self

  def rrd_status: () -> ("processed" | untyped | "error" | "unknown")

  # Fetch all claims from EVSS
  # @return [Boolean] whether there are any open EP 020's
  def pending_eps?: () -> untyped

  def rrd_pdf_created?: () -> untyped

  def rrd_pdf_uploaded_to_s3?: () -> untyped

  DOCUMENT_NAME_PREFIX: "VAMC"

  DOCUMENT_NAME_SUFFIX: "Rapid_Decision_Evidence"

  PDF_FILENAME_REGEX: ::Regexp

  RRD_CODE: "RRD"

  # @return if an RRD pdf has been included as a file to upload
  def rrd_pdf_added_for_uploading?: () -> untyped

  def rrd_special_issue_set?: () -> untyped

  def disabilities: () -> untyped

  def increase_disabilities: () -> untyped

  def increase_only?: () -> untyped

  def increase_or_new?: () -> untyped

  def diagnostic_codes: () -> untyped

  def prepare_for_evss!: () -> (nil | untyped)

  def prepare_for_ep_merge!: () -> (nil | untyped)

  def get_claim_type: () -> untyped

  def update_classification!: () -> (nil | untyped)

  def classify_single_contention: (untyped params) -> untyped

  def update_form_with_classification_code: (untyped classification_code) -> untyped

  def log_max_cfi_metrics_on_submit: () -> untyped

  def send_post_evss_notifications!: () -> untyped

  # return whether all disabilities on this form are rated as not service-connected
  def disabilities_not_service_connected?: () -> untyped

  def add_ep_merge_special_issue!: () -> untyped

  private

  def max_rated_disabilities_from_ipf: () -> (::Array[untyped] | untyped)

  def max_rated_diagnostic_codes_from_ipf: () -> untyped

  # Fetch and memoize all of the veteran's open EPs. Establishing a new EP will make the memoized
  # value outdated if using the same Form526Submission instance.
  def open_claims: () -> Array[(DisabilityCompensation::ApiProvider::Claim | Hash[String, untyped])]

  # Check both Benefits Claim service and Caseflow Appeals status APIs for open 030 or 040
  # Offramps EP 400 Merge process if any are found, or if anything fails
  def open_claim_review?: () -> untyped

  # fetch, memoize, and return all of the veteran's rated disabilities from EVSS
  def all_rated_disabilities: () -> untyped

  # @return if this claim submission was processed and fast-tracked by RRD
  def rrd_claim_processed?: () -> untyped

  def notify_mas_all_claims_tracking: () -> untyped

  def conditionally_notify_mas: () -> untyped

  def conditionally_merge_ep: () -> untyped
end
