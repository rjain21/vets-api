class InProgressForm < ApplicationRecord
  @expires_after: untyped

  @days_till_expires: untyped

  class CleanUUID < ActiveRecord::Type::String
    def cast: (untyped value) -> untyped

    alias serialize cast
  end

  attr_accessor skip_exipry_update: untyped

  attr_accessor real_user_uuid: untyped

  RETURN_URL_SQL: "CAST(metadata -> 'returnUrl' AS text)"

  def self.form_for_user: (untyped form_id, untyped user) -> untyped

  def self.for_user: (untyped user) -> untyped

  def data_and_metadata: () -> { formData: untyped, metadata: untyped }

  def metadata: () -> untyped

  #
  # Determines an expiration duration based on the UI form_id.
  # If the in_progress_form_custom_expiration feature is enabled,
  # the method can additionally return custom expiration durations whose values
  # are passed in as Strings from the UI.
  #
  # @return [ActiveSupport::Duration] an instance of ActiveSupport::Duration
  #
  def expires_after: () -> untyped

  private

  def log_hca_email_diff: () -> (untyped | nil)

  # Some IDs we get from ID.me are 20, 21, 22 or 23 char hex strings
  # > we started off with just 22 random hex chars (from openssl random bytes) years
  # > ago, and switched to UUID v4 (minus dashes) later on
  # https://dsva.slack.com/archives/C1A7KLZ9B/p1501856503336861
  def id_me_user_uuid: () -> (untyped | nil)

  def serialize_form_data: () -> (untyped | nil)

  def set_expires_at: () -> untyped

  def skip_exipry_update_check: () -> untyped

  def days_till_expires: () -> untyped

  def default_expires_after: () -> untyped

  def custom_expires_after: () -> untyped
end
