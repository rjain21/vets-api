class User < Common::RedisStore
  @account: untyped

  @account_uuid: untyped

  @account_id: untyped

  @credential_lock: untyped

  @needs_accepted_terms_of_use: untyped

  @user_verification: untyped

  @user_account: untyped

  @user_verification_id: untyped

  @user_account_uuid: untyped

  @inherited_proof_verified: untyped

  @mpi: untyped

  @veteran_status: untyped

  @identity: untyped

  @vet360_contact_info: untyped

  @relationships: untyped

  @pciu: untyped

  include Authorization

  extend Gem::Deprecate

  # Defined per issue #6042
  ID_CARD_ALLOWED_STATUSES: ::Array["V1" | "V3" | "V6"]

  def account: () -> untyped

  def account_uuid: () -> untyped

  def account_id: () -> untyped

  def credential_lock: () -> untyped

  def needs_accepted_terms_of_use: () -> untyped

  def user_verification: () -> untyped

  def user_account: () -> untyped

  def user_verification_id: () -> untyped

  def user_account_uuid: () -> untyped

  def inherited_proof_verified: () -> untyped

  def pciu_email: () -> untyped

  def pciu_primary_phone: () -> untyped

  def pciu_alternate_phone: () -> untyped

  # Returns a Date string in iso8601 format, eg. '{year}-{month}-{day}'
  def birth_date: () -> untyped

  def first_name: () -> untyped

  def common_name: () -> untyped

  def edipi: () -> untyped

  def full_name_normalized: () -> { first: untyped, middle: untyped, last: untyped, suffix: untyped }

  def gender: () -> untyped

  def icn: () -> untyped

  def loa: () -> untyped

  def mhv_account_type: () -> untyped

  def mhv_correlation_id: () -> untyped

  def middle_name: () -> untyped

  def last_name: () -> untyped

  def sec_id: () -> untyped

  def ssn: () -> untyped

  def ssn_normalized: () -> untyped

  def active_mhv_ids: () -> untyped

  def address: () -> { street: untyped, street2: untyped, city: untyped, state: untyped, country: untyped, postal_code: untyped }

  def deceased_date: () -> untyped

  def birth_date_mpi: () -> untyped

  def edipi_mpi: () -> untyped

  def first_name_mpi: () -> untyped

  def middle_name_mpi: () -> untyped

  def gender_mpi: () -> untyped

  def given_names: () -> untyped

  def home_phone: () -> untyped

  def last_name_mpi: () -> untyped

  def mhv_account_state: () -> ("DEACTIVATED" | "MULTIPLE" | "NONE" | "OK")

  def mhv_ids: () -> untyped

  def normalized_suffix: () -> untyped

  def postal_code: () -> untyped

  def ssn_mpi: () -> untyped

  def suffix: () -> untyped

  def mpi_profile?: () -> untyped

  def vha_facility_ids: () -> untyped

  def vha_facility_hash: () -> untyped

  def mpi_gcids: () -> untyped

  def set_mhv_ids: (untyped mhv_id) -> untyped

  def invalidate_mpi_cache: () -> (nil | untyped)

  def ssn_mismatch?: () -> (false | untyped)

  def can_access_user_profile?: () -> untyped

  # True if the user has 1 or more treatment facilities, false otherwise
  def va_patient?: () -> untyped

  # User's profile contains a list of VHA facility-specific identifiers.
  # Facilities in the defined range are treating facilities
  def va_treatment_facility_ids: () -> untyped

  def can_access_id_card?: () -> untyped

  def in_progress_forms: () -> untyped

  # Re-caches the MPI response. Use in response to any local changes that
  # have been made.
  def recache: () -> untyped

  # destroy both UserIdentity and self
  def destroy: () -> untyped

  def veteran_status: () -> untyped

  def identity: () -> untyped

  def vet360_contact_info: () -> (nil | untyped)

  def va_profile_email: () -> untyped

  def all_emails: () -> untyped

  def can_access_vet360?: () -> untyped

  # A user can have served in the military without being a veteran.  For example,
  # someone can be ex-military by having a discharge status higher than
  # 'Other Than Honorable'.
  #
  # @return [Boolean]
  #
  def served_in_military?: () -> untyped

  def power_of_attorney: () -> untyped

  def flipper_id: () -> untyped

  def relationships: () -> untyped

  private

  def mpi_profile: () -> (nil | untyped)

  def mpi: () -> untyped

  # Get user_verification based on login method
  # Default is idme, if login method and login uuid are not available,
  # fall back to idme
  def get_user_verification: () -> (untyped | nil)

  def get_relationships_array: () -> (nil | untyped)

  def mpi_profile_relationships: () -> (nil | untyped)

  def bgs_relationships: () -> (nil | untyped)

  def pciu: () -> (untyped | nil)
end
