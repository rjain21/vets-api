class Form526Submission < ApplicationRecord
  @form_hash: untyped

  @auth_headers_hash: untyped

  extend Logging::ThirdPartyTransaction::MethodWrapper

  include AASM

  include SentryLogging

  include Form526ClaimFastTrackingConcern

  def log_status_change: () -> untyped

  FORM_526: "form526"

  FORM_526_UPLOADS: "form526_uploads"

  FORM_4142: "form4142"

  FORM_0781: "form0781"

  FORM_8940: "form8940"

  FLASHES: "flashes"

  BIRLS_KEY: "va_eauth_birlsfilenumber"

  SUBMIT_FORM_526_JOB_CLASSES: ::Array["SubmitForm526AllClaim" | "SubmitForm526"]

  # Called when the DisabilityCompensation form controller is ready to hand off to the backend
  # submission process. Currently this passes directly to the retryable EVSS workflow, but if any
  # one-time setup or workflow redirection (e.g. for Claims Fast-Tracking) needs to happen, it should
  # go here and call start_evss_submission_job when done.
  def start: () -> untyped

  # Kicks off a retryable 526 submit workflow. The first step in a submission workflow is to submit
  # an increase only or all claims form. Once the first job succeeds the batch will callback and run
  # one (cleanup job) or more ancillary jobs such as uploading supporting evidence or submitting ancillary forms.
  #
  # @return [String] the job id of the first job in the batch, i.e the 526 submit job
  #
  def start_evss_submission_job: () -> untyped

  # Runs start_evss_submission_job but first looks to see if the veteran has BIRLS IDs that previous start
  # attempts haven't used before (if so, swaps one of those into auth_headers).
  # If all BIRLS IDs for a veteran have been tried, does nothing and returns nil.
  # Note: this assumes that the current BIRLS ID has been used (that `start` has been attempted once).
  #
  # @return [String] the job id of the first job in the batch, i.e the 526 submit job
  # @return [NilClass] all BIRLS IDs for the veteran have been tried
  #
  def submit_with_birls_id_that_hasnt_been_tried_yet!: (?extra_content_for_sentry: ::Hash[untyped, untyped], ?silence_errors_and_log_to_sentry: bool) -> untyped

  # Note that the User record is cached in Redis -- `User.redis_namespace_ttl`
  def get_first_name: () -> untyped

  # Checks against the User record first, and then resorts to checking the auth_headers
  # for the name attributes if the User record doesn't exist or contain the full name
  #
  # @return [Hash] of the user's full name (first, middle, last, suffix)
  #
  def full_name: () -> (untyped | { first: untyped, middle: nil, last: untyped, suffix: nil })

  # form_json is memoized here so call invalidate_form_hash after updating form_json
  # @return [Hash] parsed version of the form json
  #
  def form: () -> untyped

  # Call this method to invalidate the memoized @form_hash variable after updating form_json.
  # A hook that calls this method could be added so that we don't have to call this manually,
  # see https://stackoverflow.com/questions/24314584/run-a-callback-only-if-an-attribute-has-changed-in-rails
  def invalidate_form_hash: () -> (untyped | nil)

  # A 526 submission can include the 526 form submission, uploads, and ancillary items.
  # This method returns a single item as JSON
  #
  # @param item [String] the item key
  # @return [String] the requested form object as JSON
  #
  def form_to_json: (untyped item) -> untyped

  # @return [Hash] parsed auth headers
  #
  def auth_headers: () -> untyped

  # this method is for queuing up BIRLS ids in the birls_ids_tried hash,
  # and can also be used for initializing birls_ids_tried.
  # birls_ids_tried has this shape:
  # {
  #   birls_id => [timestamp, timestamp, ...],
  #   birls_id => [timestamp, timestamp, ...], # in practice, will be only 1 timestamp
  #   ...
  # }
  # where each timestamp notes when a submissison job (start) was started
  # with that BIRLS id (birls_id_tried keeps track of which BIRLS id
  # have been tried so far).
  # add_birls_ids does not overwrite birls_ids_tried.
  # example:
  # > sub.birls_ids_tried = { '111' => ['2021-01-01T0000Z'] }
  # > sub.add_birls_ids ['111', '222', '333']
  # > pp sub.birls_ids_tried
  #    {
  #      '111' => ['2021-01-01T0000Z'], # a tried BIRLS ID
  #      '222' => [],  # an untried BIRLS ID
  #      '333' => []   # an untried BIRLS ID
  #    }
  # NOTE: '111' was not cleared
  def add_birls_ids: (untyped id_or_ids) -> untyped

  def birls_ids: () -> untyped

  def birls_ids_tried_hash: () -> untyped

  def mark_birls_id_as_tried: (?untyped id, ?timestamp_string: untyped) -> untyped

  def mark_birls_id_as_tried!: (*untyped, **untyped `**`) -> untyped

  def birls_ids_that_havent_been_tried_yet: () -> untyped

  def birls_id!: () -> untyped

  def birls_id: () -> (untyped | nil)

  def birls_id=: (untyped value) -> untyped

  # Called by Sidekiq::Batch as part of the Form 526 submission workflow
  # The workflow batch success handler
  #
  # @param _status [Sidekiq::Batch::Status] the status of the batch
  # @param options [Hash] payload set in the workflow batch
  #
  def perform_ancillary_jobs_handler: (untyped _status, untyped options) -> untyped

  def jobs_succeeded?: () -> untyped

  def a_submit_form_526_job_succeeded?: () -> untyped

  def all_other_jobs_succeeded_if_any?: () -> untyped

  # Creates a batch for the ancillary jobs, sets up the callback, and adds the jobs to the batch if necessary
  #
  # @param first_name [String] the first name of the user that submitted Form526
  # @return [String] the workflow batch id
  #
  def perform_ancillary_jobs: (untyped first_name) -> untyped

  # Called by Sidekiq::Batch as part of the Form 526 submission workflow
  # Checks if all workflow steps were successful and if so marks it as complete.
  #
  # @param _status [Sidekiq::Batch::Status] the status of the batch
  # @param options [Hash] payload set in the workflow batch
  #
  def workflow_complete_handler: (untyped _status, untyped options) -> untyped

  def bdd?: () -> untyped

  def personalization_parameters: (untyped first_name) -> ::Hash[::String, untyped]

  private

  def queue_central_mail_backup_submission_for_non_retryable_error!: (?e: untyped?) -> untyped

  def enqueue_backup_submission: (untyped id) -> untyped

  def submit_uploads: () -> untyped

  def upload_bdd_instructions: () -> untyped

  def submit_form_4142: () -> untyped

  def submit_form_0781: () -> untyped

  def submit_form_8940: () -> untyped

  def submit_flashes: () -> untyped

  def cleanup: () -> untyped
end
